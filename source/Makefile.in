##
## - - -  iMaze  - - -
##
## Copyright (c) 1993-2001 by Hans-Ulrich Kiel & Joerg Czeranski
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are
## met:
##
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in the
##    documentation and/or other materials provided with the distribution.
## 3. The name of the authors may not be used to endorse or promote
##    products derived from this software without specific prior written
##    permission.
## 4. The name ``iMaze'' may not be used for products derived from this
##    software unless a prefix or a suffix is added to the name.
##
## THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
## IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
## WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
## DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT,
## INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
## (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
## SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
## HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
## STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
## IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
## POSSIBILITY OF SUCH DAMAGE.
##
##
## File: Makefile.in
##
## SccsID:
##  @(#)Makefile.in	3.19 12/09/01
##

#BEGIN configure output
Unconfigured:
	@echo "run ./configure first, don't use this makefile"
#END configure output

DEFINES=-DDEFAULT_SOUND_DIR=\"`pwd`/../sounds\"
#
# possible values:
#
# -DDEFAULT_SERVER=\"imaze.rz.tu-clausthal.de\"
# -DDEFAULT_PORT=5323
# -DDEFAULT_SOUND_DIR=\"/usr/local/lib/imaze/sounds\"
#

# for "make install":
BINDIR=..

#COPT=-O
#CC=

###########################################################################

LD=$(CC)
INSTALL=install -s -m 755

X11Libs=-lX11
#AthenaLibs=-lXaw -lXt
AthenaLibs=-lXaw -lXt -lXmu
MotifLibs=-lXm -lXt
XViewLibs=-lxview -lolgx

# bis hier Optionen eintragen
###########################################################################

CLIENTOBJS=argv.o client.o rechne3d.o trigtab.o speicher.o \
	rechne_karte.o ip_netz.o netzwerk.o global.o system.o audio.o
X11Objs=X_farben.o X_grafik.o X_daten.o X_tasten.o
XViewObjs=xv_fenster.o xv_tasten.o xv_ereignisse.o
XtObjs=Xt_fenster.o
MotifObjs=X_icon.o motif_appdefs.o motif_fenster.o $(XtObjs)
AthenaObjs=X_icon.o athena_appdefs.o athena_fenster.o $(XtObjs)
GENTRIGOBJS=gentrigtab.o global.o
SERVEROBJS=argv.o server.o ip_server.o speicher.o bewegung.o trigtab.o \
	global.o system.o init_spieler.o session.o
NINJAOBJS=argv.o ip_netz.o netzwerk.o ninja.o speicher.o global.o system.o
IMAZESTATOBJS=argv.o ip_netz.o netzwerk.o imazestat.o speicher.o global.o \
	system.o
GENLABOBJS=baulab.o speicher.o global.o
XLABEDOBJS=global.o lab_edit_w.o request.o xlabed.o xlabed_appdefs.o
AUDIOHWOBJS=mme_audio.o no_audio.o sun_audio.o voxware_audio.o
JOYSTICKHWOBJS=fbsd_joystick.o linux_joystick.o no_joystick.o
OBJS=$(CLIENTOBJS) $(X11Objs) $(XViewObjs) $(XtObjs) $(MotifObjs) \
	$(AthenaObjs) $(GENTRIGOBJS) $(SERVEROBJS) $(NINJAOBJS) \
	$(IMAZESTATOBJS) $(GENLABOBJS) $(XLABEDOBJS) $(AUDIOHWOBJS) \
	$(JOYSTICKHWOBJS)

SRCS=X_daten.c X_farben.c X_grafik.c X_icon.c X_tasten.c Xt_fenster.c \
	argv.c athena_appdefs.c athena_fenster.c audio.c baulab.c bewegung.c \
	client.c fbsd_joystick.c gentrigtab.c global.c imazestat.c \
	init_spieler.c ip_netz.c ip_server.c lab_edit_w.c linux_joystick.c \
	mme_audio.c motif_appdefs.c motif_fenster.c netzwerk.c ninja.c \
	no_audio.c no_joystick.c rechne3d.c rechne_karte.c request.c server.c \
	session.c speicher.c sun_audio.c system.c voxware_audio.c xlabed.c \
	xlabed_appdefs.c xv_ereignisse.c xv_fenster.c \
	xv_tasten.c

HEADERS=X_daten.h X_farben.h X_grafik.h X_icon.h Xt_appdefs.h Xt_fenster.h \
	X_tasten.h argv.h audio.h audio_hw.h bewegung.h client.h einaus.h \
	ereignisse.h farben.h fehler.h global.h grafik.h iMaze_1_4.xbm \
	init_spieler.h joystick.h lab_edit_w.h lab_edit_wp.h labyrinth.h \
	netzwerk.h protokoll.h rechne.h request.h server.h server_netz.h \
	signale.h speicher.h spiel.h spieler.h system.h xlabed_appdefs.h \
	xv_einaus.h xv_icon.h xv_icon_maske.h

NONGRAFEXECS=imazesrv ninja imazestat genlab

EXECS=imaze $(NONGRAFEXECS) xlabed

###########################################################################
# ab hier rules

default: all

all: 	$(EXECS)

dist:	$(SRCS) $(HEADERS) Makefile.in configure
	rm -f imaze.tar.Z
	tar cf imaze.tar $(SRCS) $(HEADERS) Makefile.in configure
	compress imaze.tar

install: $(EXECS)
	$(INSTALL) $(EXECS) $(BINDIR)

clean:
	rm -f $(OBJS) $(EXECS) gentrigtab trigtab.c core

mostly-clean:
	rm -f $(OBJS) gentrigtab trigtab.c core

imaze: $(CLIENTOBJS) $(ClientObjs)
	$(LD) $(LDFLAGS) -o $@ $(CLIENTOBJS) $(ClientObjs) $(ClientLFlags) \
		$(ClientLibs)

imazesrv: $(SERVEROBJS)
	$(LD) $(LDFLAGS) -o $@ $(SERVEROBJS) $(BasicLFlags) $(BasicLibs)

ninja: $(NINJAOBJS)
	$(LD) $(LDFLAGS) -o $@ $(NINJAOBJS) $(BasicLFlags) $(BasicLibs)

imazestat: $(IMAZESTATOBJS)
	$(LD) $(LDFLAGS) -o $@ $(IMAZESTATOBJS) $(BasicLFlags) $(BasicLibs)

genlab: $(GENLABOBJS)
	$(LD) $(LDFLAGS) -o $@ $(GENLABOBJS) $(BasicLFlags) $(BasicLibs)

xlabed: $(XLABEDOBJS)
	$(LD) $(LDFLAGS) -o $@ $(XLABEDOBJS) $(LFlags) $(X11LFlags) \
		$(AthenaLFlags) $(AthenaLibs) $(X11Libs) $(Libs)

gentrigtab: $(GENTRIGOBJS)
	$(LD) $(LDFLAGS) -o $@ $(GENTRIGOBJS) $(BasicLFlags) $(BasicLibs) -lm

trigtab.c: gentrigtab
	./gentrigtab > trigtab.c

X_daten.o: global.h speicher.h grafik.h X_daten.h X_daten.c
	$(CC) -c $(ClientCFlags) X_daten.c

X_farben.o: farben.h X_farben.h X_farben.c
	$(CC) -c $(ClientCFlags) X_farben.c

X_grafik.o: global.h speicher.h farben.h grafik.h fehler.h X_farben.h \
	X_grafik.h iMaze_1_4.xbm X_grafik.c
	$(CC) -c $(ClientCFlags) X_grafik.c

X_icon.o: X_icon.h X_icon.c
	$(CC) -c $(ClientCFlags) X_icon.c

X_tasten.o: argv.h global.h system.h signale.h ereignisse.h einaus.h grafik.h \
	X_tasten.h joystick.h X_tasten.c
	$(CC) -c $(ClientCFlags) X_tasten.c

Xt_fenster.o: argv.h grafik.h signale.h ereignisse.h client.h X_grafik.h \
	X_tasten.h Xt_appdefs.h audio.h Xt_fenster.h Xt_fenster.c
	$(CC) -c $(ClientCFlags) Xt_fenster.c

argv.o:	argv.h speicher.h argv.c
	$(CC) -c $(BasicCFlags) argv.c

athena_appdefs.o: Xt_appdefs.h athena_appdefs.c
	$(CC) -c $(ClientCFlags) athena_appdefs.c

athena_fenster.o: argv.h grafik.h signale.h ereignisse.h client.h system.h \
	einaus.h X_grafik.h X_tasten.h X_daten.h X_icon.h Xt_appdefs.h \
	Xt_fenster.h athena_fenster.c
	$(CC) -c $(ClientCFlags) athena_fenster.c

audio.o: argv.h fehler.h speicher.h system.h ereignisse.h audio.h audio_hw.h \
	audio.c
	$(CC) -c $(ClientCFlags) audio.c

baulab.o: global.h speicher.h labyrinth.h farben.h baulab.c
	$(CC) -c $(BasicCFlags) baulab.c

bewegung.o: global.h speicher.h labyrinth.h spieler.h \
	signale.h ereignisse.h protokoll.h bewegung.h server.h bewegung.c
	$(CC) -c $(BasicCFlags) bewegung.c

client.o: argv.h global.h fehler.h speicher.h labyrinth.h client.h spieler.h \
	grafik.h signale.h ereignisse.h einaus.h rechne.h netzwerk.h spiel.h \
	client.c
	$(CC) -c $(ClientCFlags) client.c

fbsd_joystick.o:	argv.h global.h system.h signale.h joystick.h \
	fbsd_joystick.c
	$(CC) -c $(ClientCFlags) fbsd_joystick.c

gentrigtab.o: global.h gentrigtab.c
	$(CC) -c $(BasicCFlags) gentrigtab.c

global.o: global.h global.c
	$(CC) -c $(BasicCFlags) global.c

imazestat.o: argv.h global.h labyrinth.h spieler.h signale.h netzwerk.h \
	spiel.h system.h imazestat.c
	$(CC) -c $(BasicCFlags) imazestat.c

init_spieler.o: argv.h global.h speicher.h labyrinth.h protokoll.h \
	server_netz.h init_spieler.h init_spieler.c
	$(CC) -c $(BasicCFlags) init_spieler.c

ip_netz.o: argv.h fehler.h speicher.h netzwerk.h system.h ip_netz.c
	$(CC) -c $(BasicCFlags) ip_netz.c

ip_server.o: argv.h speicher.h server_netz.h system.h ip_server.c
	$(CC) -c $(BasicCFlags) ip_server.c

lab_edit_w.o:	lab_edit_w.h lab_edit_wp.h global.h lab_edit_w.c
	$(CC) -c $(CFlags) $(DEFINES) $(X11CFlags) $(AthenaCFlags) lab_edit_w.c

linux_joystick.o:	argv.h global.h system.h signale.h joystick.h \
	linux_joystick.c
	$(CC) -c $(ClientCFlags) linux_joystick.c

mme_audio.o: argv.h fehler.h system.h audio.h audio_hw.h mme_audio.c
	$(CC) -c $(ClientCFlags) mme_audio.c

motif_appdefs.o: Xt_appdefs.h motif_appdefs.c
	$(CC) -c $(ClientCFlags) motif_appdefs.c

motif_fenster.o: argv.h grafik.h signale.h ereignisse.h client.h system.h \
	einaus.h X_grafik.h X_tasten.h X_daten.h X_icon.h Xt_appdefs.h \
	Xt_fenster.h motif_fenster.c
	$(CC) -c $(ClientCFlags) motif_fenster.c

netzwerk.o: argv.h global.h fehler.h speicher.h labyrinth.h spieler.h \
	signale.h ereignisse.h protokoll.h netzwerk.h spiel.h system.h \
	netzwerk.c
	$(CC) -c $(BasicCFlags) netzwerk.c

ninja.o: argv.h global.h speicher.h labyrinth.h farben.h spieler.h signale.h \
	ereignisse.h netzwerk.h spiel.h system.h ninja.c
	$(CC) -c $(BasicCFlags) ninja.c

no_audio.o: argv.h ereignisse.h audio.h audio_hw.h no_audio.c
	$(CC) -c $(ClientCFlags) no_audio.c

no_joystick.o:	argv.h joystick.h no_joystick.c
	$(CC) -c $(ClientCFlags) no_joystick.c

rechne3d.o: global.h speicher.h labyrinth.h farben.h spieler.h grafik.h \
	rechne.h rechne3d.c
	$(CC) -c $(ClientCFlags) rechne3d.c

rechne_karte.o: global.h speicher.h labyrinth.h farben.h spieler.h \
	grafik.h rechne.h rechne_karte.c
	$(CC) -c $(ClientCFlags) rechne_karte.c

request.o:	request.h request.c
	$(CC) -c $(CFlags) $(DEFINES) $(X11CFlags) $(AthenaCFlags) request.c

server.o: argv.h global.h fehler.h speicher.h labyrinth.h server_netz.h \
	server.h init_spieler.h server.c
	$(CC) -c $(BasicCFlags) server.c

session.o: argv.h global.h speicher.h spieler.h protokoll.h system.h \
	server_netz.h bewegung.h server.h session.c
	$(CC) -c $(BasicCFlags) session.c

speicher.o: global.h fehler.h speicher.h speicher.c
	$(CC) -c $(BasicCFlags) speicher.c

sun_audio.o: argv.h fehler.h system.h ereignisse.h audio.h audio_hw.h \
	sun_audio.c
	$(CC) -c $(ClientCFlags) sun_audio.c

system.o: system.h speicher.h system.c
	$(CC) -c $(BasicCFlags) system.c

trigtab.o: global.h trigtab.c
	$(CC) -c $(BasicCFlags) trigtab.c

voxware_audio.o: argv.h ereignisse.h fehler.h system.h audio.h audio_hw.h \
	voxware_audio.c
	$(CC) -c $(ClientCFlags) voxware_audio.c

xlabed.o:	lab_edit_w.h request.h xlabed_appdefs.h xlabed.c
	$(CC) -c $(CFlags) $(DEFINES) $(X11CFlags) $(AthenaCFlags) xlabed.c

xlabed_appdefs.o:	xlabed_appdefs.h xlabed_appdefs.c
	$(CC) -c $(CFlags) $(DEFINES) $(X11CFlags) $(AthenaCFlags) \
		xlabed_appdefs.c

xv_ereignisse.o: argv.h signale.h ereignisse.h einaus.h xv_einaus.h audio.h \
	xv_ereignisse.c
	$(CC) -c $(ClientCFlags) xv_ereignisse.c

xv_fenster.o: argv.h speicher.h grafik.h signale.h fehler.h client.h system.h \
	X_grafik.h X_daten.h xv_einaus.h xv_icon.h xv_icon_maske.h xv_fenster.c
	$(CC) -c $(ClientCFlags) xv_fenster.c

xv_tasten.o: argv.h signale.h ereignisse.h einaus.h grafik.h xv_einaus.h \
	X_tasten.c xv_tasten.c
	$(CC) -c $(ClientCFlags) xv_tasten.c

#
